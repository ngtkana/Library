{
	"disjoint set": {
		"prefix": "disjoint set",
		"body": [
			"struct disjoint_set {",
			"\tint n;",
			"\tvector<int> prt;",
			"\tdisjoint_set (int n)",
			"\t\t: n(n)",
			"\t\t, prt(n, -1)",
			"\t{}",
			"\tbool is_root (int x) {return prt[x] < 0;}",
			"\tint size (int x) {return prt[find(x)];}",
			"\tbool equiv (int x, int y) {return find(x) == find(y);}",
			"\tint find (int x) {",
			"\t\tif (is_root(x)) return x;",
			"\t\telse return prt[x] = find(prt[x]);",
			"\t}",
			"\tbool unite (int x, int y) {",
			"\t\tx = find(x);",
			"\t\ty = find(y);",
			"\t\tif (x == y) return false;",
			"\t\tif (size(x) < size(y)) swap(x, y);",
			"\t\tprt[x] += prt[y];",
			"\t\tprt[y] = x;",
			"\t\treturn true;",
			"\t}",
			"};"
		],
		"description": "none"
	},
	"segment tree": {
		"prefix": "segment tree",
		"body": [
		],
		"description": "none"
	},
	"none": {
	}
}
